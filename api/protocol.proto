syntax = "proto3";

package braid;

option go_package = "github.com/vsekhar/braid/pkg/api/braidpb";

import "braid.proto";

message Frame {

    // Protobufs are not on their own self-delimiting, however nested messages
    // are encoded on the wire as tag-length-value tuples, effectively
    // producing a stream of heterogenous messages. So we can construct a
    // self-delimiting message by ensuring it only ever contains on the wire one
    // populated field, and that field is of protobuf message type. These
    // properties of Frame are verified in tests and at package initialization.
    //
    // The benefit of this approach is that we can simply construct and write
    // out frames to a stream and we can re-use protobufs existing machinery
    // for length-prefixing and switching on message type in a way that stays
    // up-to-date with the field definitions here.

    oneof payload {
        NoOp noop = 1;

        Message message = 2;
        RequestMessages request_messages = 3;

        Peer peer = 4;
        RequestPeers request_peers = 5;

        NoOp lastField = 536870911; // for testing
   }
}

message NoOp {}

message FrontierRef {
    // Nodes should order messagerefs in messages as described in MessageSetRef
    // and not in the order of the node's frontier parent table since this would
    // leak the bookkeepping work for other nodes to exploit.
    MessageSetRef messages = 1;
}

message RequestMessages {
    repeated MessageRef want = 1;

    // Optional frontier of the requesting node so that the responding node can
    // also send other messages the requesting node might need (e.g. the
    // transitive parents of the messages in want).
    FrontierRef frontier = 2;
}

message Peer {
    string address = 1;
    Identity identity = 2; // optional, validate if provided
}

message RequestPeers {}
